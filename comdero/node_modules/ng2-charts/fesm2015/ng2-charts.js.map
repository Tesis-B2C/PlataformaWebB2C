{"version":3,"file":"ng2-charts.js.map","sources":["ng://ng2-charts/lib/default-colors.ts","ng://ng2-charts/lib/get-colors.ts","ng://ng2-charts/lib/base-chart.directive.ts","ng://ng2-charts/lib/charts.module.ts"],"sourcesContent":["export const defaultColors: Array<number[]> = [\r\n  [255, 99, 132],\r\n  [54, 162, 235],\r\n  [255, 206, 86],\r\n  [231, 233, 237],\r\n  [75, 192, 192],\r\n  [151, 187, 205],\r\n  [220, 220, 220],\r\n  [247, 70, 74],\r\n  [70, 191, 189],\r\n  [253, 180, 92],\r\n  [148, 159, 177],\r\n  [77, 83, 96]\r\n];\r\n","import { Color } from './color';\r\nimport { Colors } from './colors';\r\nimport { defaultColors } from './default-colors';\r\n\r\n/**\r\n * Generate colors by chart type\r\n */\r\nexport function getColors(chartType: string, index: number, count: number): Color {\r\n  if (chartType === 'pie' || chartType === 'doughnut') {\r\n    return formatPieColors(generateColors(count));\r\n  }\r\n\r\n  if (chartType === 'polarArea') {\r\n    return formatPolarAreaColors(generateColors(count));\r\n  }\r\n\r\n  if (chartType === 'line' || chartType === 'radar') {\r\n    return formatLineColor(generateColor(index));\r\n  }\r\n\r\n  if (chartType === 'bar' || chartType === 'horizontalBar') {\r\n    return formatBarColor(generateColor(index));\r\n  }\r\n  throw new Error(`getColors - Unsupported chart type ${chartType}`);\r\n}\r\n\r\nfunction rgba(colour: Array<number>, alpha: number): string {\r\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction formatLineColor(colors: Array<number>): Color {\r\n  return {\r\n    backgroundColor: rgba(colors, 0.4),\r\n    borderColor: rgba(colors, 1),\r\n    pointBackgroundColor: rgba(colors, 1),\r\n    pointBorderColor: '#fff',\r\n    pointHoverBackgroundColor: '#fff',\r\n    pointHoverBorderColor: rgba(colors, 0.8)\r\n  };\r\n}\r\n\r\nfunction formatBarColor(colors: Array<number>): Color {\r\n  return {\r\n    backgroundColor: rgba(colors, 0.6),\r\n    borderColor: rgba(colors, 1),\r\n    hoverBackgroundColor: rgba(colors, 0.8),\r\n    hoverBorderColor: rgba(colors, 1)\r\n  };\r\n}\r\n\r\nfunction formatPieColors(colors: Array<number[]>): Colors {\r\n  return {\r\n    backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\r\n    borderColor: colors.map(() => '#fff'),\r\n    pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    pointBorderColor: colors.map(() => '#fff'),\r\n    pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\r\n  };\r\n}\r\n\r\nfunction formatPolarAreaColors(colors: Array<number[]>): Color {\r\n  return {\r\n    backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\r\n    borderColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\r\n    hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\r\n  };\r\n}\r\n\r\nfunction getRandomColor(): number[] {\r\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\r\n}\r\n\r\n/**\r\n * Generate colors for line|bar charts\r\n */\r\nfunction generateColor(index: number): number[] {\r\n  return defaultColors[index] || getRandomColor();\r\n}\r\n\r\n/**\r\n * Generate colors for pie|doughnut charts\r\n */\r\nfunction generateColors(count: number): Array<number[]> {\r\n  const colorsArr: Array<number[]> = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    colorsArr[i] = defaultColors[i] || getRandomColor();\r\n  }\r\n  return colorsArr;\r\n}\r\n","import {\r\n  Directive,\r\n  OnDestroy,\r\n  OnChanges,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport * as chartJs from 'chart.js';\r\nimport { getColors } from './get-colors';\r\nimport { Color } from './color';\r\n\r\nexport type SingleDataSet = (number[] | chartJs.ChartPoint[]);\r\nexport type MultiDataSet = (number[] | chartJs.ChartPoint[])[];\r\nexport type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;\r\n\r\n/* The following two types are copied from @types/chart.js because they are not\r\n * exported from there. There is a pull request to definitely type requesting this\r\n * change (PR #33614 https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33614)\r\n */\r\nexport interface PluginServiceGlobalRegistration {\r\n  id?: string;\r\n}\r\n\r\nexport interface PluginServiceRegistrationOptions {\r\n  beforeInit?(chartInstance: Chart, options?: any): void;\r\n  afterInit?(chartInstance: Chart, options?: any): void;\r\n\r\n  beforeUpdate?(chartInstance: Chart, options?: any): void;\r\n  afterUpdate?(chartInstance: Chart, options?: any): void;\r\n\r\n  beforeLayout?(chartInstance: Chart, options?: any): void;\r\n  afterLayout?(chartInstance: Chart, options?: any): void;\r\n\r\n  beforeDatasetsUpdate?(chartInstance: Chart, options?: any): void;\r\n  afterDatasetsUpdate?(chartInstance: Chart, options?: any): void;\r\n\r\n  beforeDatasetUpdate?(chartInstance: Chart, options?: any): void;\r\n  afterDatasetUpdate?(chartInstance: Chart, options?: any): void;\r\n\r\n  // This is called at the start of a render. It is only called once, even if\r\n  // the animation will run for a number of frames. Use beforeDraw or afterDraw\r\n  // to do something on each animation frame\r\n  beforeRender?(chartInstance: Chart, options?: any): void;\r\n  afterRender?(chartInstance: Chart, options?: any): void;\r\n\r\n  // Easing is for animation\r\n  beforeDraw?(chartInstance: Chart, easing: string, options?: any): void;\r\n  afterDraw?(chartInstance: Chart, easing: string, options?: any): void;\r\n\r\n  // Before the datasets are drawn but after scales are drawn\r\n  beforeDatasetsDraw?(chartInstance: Chart, easing: string, options?: any): void;\r\n  afterDatasetsDraw?(chartInstance: Chart, easing: string, options?: any): void;\r\n\r\n  beforeDatasetDraw?(chartInstance: Chart, easing: string, options?: any): void;\r\n  afterDatasetDraw?(chartInstance: Chart, easing: string, options?: any): void;\r\n\r\n  // Called before drawing the `tooltip`. If any plugin returns `false`,\r\n  // the tooltip drawing is cancelled until another `render` is triggered.\r\n  beforeTooltipDraw?(chartInstance: Chart, tooltipData?: any, options?: any): void;\r\n  // Called after drawing the `tooltip`. Note that this hook will not,\r\n  // be called if the tooltip drawing has been previously cancelled.\r\n  afterTooltipDraw?(chartInstance: Chart, tooltipData?: any, options?: any): void;\r\n\r\n  // Called when an event occurs on the chart\r\n  beforeEvent?(chartInstance: Chart, event: Event, options?: any): void;\r\n  afterEvent?(chartInstance: Chart, event: Event, options?: any): void;\r\n\r\n  resize?(chartInstance: Chart, newChartSize: Chart.ChartSize, options?: any): void;\r\n  destroy?(chartInstance: Chart): void;\r\n\r\n  /** @deprecated since version 2.5.0. Use `afterLayout` instead. */\r\n  afterScaleUpdate?(chartInstance: Chart, options?: any): void;\r\n}\r\n\r\nexport type PluginServiceGlobalRegistrationAndOptions = PluginServiceGlobalRegistration & PluginServiceRegistrationOptions;\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: 'canvas[baseChart]',\r\n  exportAs: 'base-chart'\r\n})\r\nexport class BaseChartDirective implements OnDestroy, OnChanges, OnInit {\r\n  @Input() public data: SingleOrMultiDataSet;\r\n  @Input() public datasets: chartJs.ChartDataSets[];\r\n  @Input() public labels: string[];\r\n  @Input() public options: chartJs.ChartOptions = {};\r\n  @Input() public chartType: chartJs.ChartType;\r\n  @Input() public colors: Color[];\r\n  @Input() public legend: boolean;\r\n\r\n  @Output() public chartClick: EventEmitter<{ event?: MouseEvent, active?: {}[] }> = new EventEmitter();\r\n  @Output() public chartHover: EventEmitter<{ event: MouseEvent, active: {}[] }> = new EventEmitter();\r\n\r\n  public ctx: string;\r\n  public chart: Chart;\r\n  private initFlag = false;\r\n\r\n  /**\r\n   * Register a plugin.\r\n   */\r\n  public static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions) {\r\n    chartJs.Chart.plugins.register(plugin);\r\n  }\r\n\r\n  public constructor(private element: ElementRef) { }\r\n\r\n  public ngOnInit() {\r\n    this.ctx = this.element.nativeElement.getContext('2d');\r\n    this.initFlag = true;\r\n    if (this.data || this.datasets) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (this.initFlag) {\r\n      let updateRequired = false;\r\n      // Check if the changes are in the data or datasets or labels or legend\r\n\r\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\r\n        if (changes.data) {\r\n          this.updateChartData(changes.data.currentValue);\r\n        } else {\r\n          this.updateChartData(changes.datasets.currentValue);\r\n        }\r\n\r\n        updateRequired = true;\r\n      }\r\n      if (changes.hasOwnProperty('labels')) {\r\n        this.chart.data.labels = changes.labels.currentValue;\r\n\r\n        updateRequired = true;\r\n      }\r\n      if (changes.hasOwnProperty('legend')) {\r\n        this.chart.config.options.legend.display = changes.legend.currentValue;\r\n        this.chart.generateLegend();\r\n\r\n        updateRequired = true;\r\n      }\r\n\r\n      if (updateRequired) {\r\n        // ... if so, update chart\r\n        this.chart.update();\r\n      } else {\r\n        // otherwise rebuild the chart\r\n        this.refresh();\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n      this.chart = void 0;\r\n    }\r\n  }\r\n\r\n  public update(duration?: any, lazy?: any) {\r\n    return this.chart.update(duration, lazy);\r\n  }\r\n\r\n  public getChartBuilder(ctx: string/*, data:any[], options:any*/): Chart {\r\n    const datasets = this.getDatasets();\r\n\r\n    const options = Object.assign({}, this.options);\r\n    if (this.legend === false) {\r\n      options.legend = { display: false };\r\n    }\r\n    // hook for onHover and onClick events\r\n    options.hover = options.hover || {};\r\n    if (!options.hover.onHover) {\r\n      options.hover.onHover = (event: MouseEvent, active: {}[]) => {\r\n        if (active && !active.length) {\r\n          return;\r\n        }\r\n        this.chartHover.emit({ event, active });\r\n      };\r\n    }\r\n\r\n    if (!options.onClick) {\r\n      options.onClick = (event?: MouseEvent, active?: {}[]) => {\r\n        this.chartClick.emit({ event, active });\r\n      };\r\n    }\r\n\r\n    const chartConfig: chartJs.ChartConfiguration = {\r\n      type: this.chartType,\r\n      data: {\r\n        labels: this.labels,\r\n        datasets\r\n      },\r\n      options\r\n    };\r\n\r\n    return new chartJs.Chart(ctx, chartConfig);\r\n  }\r\n\r\n  private isChartDataSetsArray(v: SingleOrMultiDataSet | chartJs.ChartDataSets[]): v is chartJs.ChartDataSets[] {\r\n    const elm = v[0];\r\n    return (typeof (elm) === 'object') && 'data' in elm;\r\n  }\r\n\r\n  private updateChartData(newDataValues: SingleOrMultiDataSet | chartJs.ChartDataSets[]): void {\r\n    if (this.isChartDataSetsArray(newDataValues)) {\r\n      if (newDataValues.length === this.chart.data.datasets.length) {\r\n        this.chart.data.datasets.forEach((dataset, i: number) => {\r\n          dataset.data = newDataValues[i].data;\r\n          if (newDataValues[i].label) {\r\n            dataset.label = newDataValues[i].label;\r\n          }\r\n        });\r\n      } else {\r\n        this.chart.data.datasets = [...newDataValues];\r\n      }\r\n    } else if (!this.isSingleDataSet(newDataValues)) {\r\n      if (newDataValues.length === this.chart.data.datasets.length) {\r\n        this.chart.data.datasets.forEach((dataset, i: number) => {\r\n          dataset.data = newDataValues[i];\r\n        });\r\n      } else {\r\n        this.chart.data.datasets = newDataValues.map((data: number[], index: number) => {\r\n          return { data, label: this.labels[index] || `Label ${index}` };\r\n        });\r\n      }\r\n    } else {\r\n      this.chart.data.datasets[0].data = newDataValues;\r\n    }\r\n  }\r\n\r\n  private isSingleDataSet(data: SingleOrMultiDataSet): data is SingleDataSet {\r\n    return !Array.isArray(data[0]);\r\n  }\r\n\r\n  private getDatasets() {\r\n    let datasets: chartJs.ChartDataSets[] = void 0;\r\n    // in case if datasets is not provided, but data is present\r\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\r\n      if (!this.isSingleDataSet(this.data)) {\r\n        datasets = this.data.map((data: number[], index: number) => {\r\n          return { data, label: this.labels[index] || `Label ${index}` };\r\n        });\r\n      } else {\r\n        datasets = [{ data: this.data, label: `Label 0` }];\r\n      }\r\n    }\r\n\r\n    if (this.datasets && this.datasets.length ||\r\n      (datasets && datasets.length)) {\r\n      datasets = (this.datasets || datasets)\r\n        .map((elm: chartJs.ChartDataSets, index: number) => {\r\n          const newElm: chartJs.ChartDataSets = Object.assign({}, elm);\r\n          if (this.colors && this.colors.length) {\r\n            Object.assign(newElm, this.colors[index]);\r\n          } else {\r\n            Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\r\n          }\r\n          return newElm;\r\n        });\r\n    }\r\n\r\n    if (!datasets) {\r\n      throw new Error(`ng-charts configuration error,\r\n      data or datasets field are required to render char ${this.chartType}`);\r\n    }\r\n\r\n    return datasets;\r\n  }\r\n\r\n  private refresh() {\r\n    // if (this.options && this.options.responsive) {\r\n    //   setTimeout(() => this.refresh(), 50);\r\n    // }\r\n\r\n    // todo: remove this line, it is producing flickering\r\n    this.ngOnDestroy();\r\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BaseChartDirective } from './base-chart.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BaseChartDirective\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    BaseChartDirective\r\n  ]\r\n})\r\nexport class ChartsModule { }\r\n"],"names":["chartJs.Chart"],"mappings":"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"}
