/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';
var PushNotificationOptions = /** @class */ (function () {
    function PushNotificationOptions() {
        this.dir = (/** @type {?} */ ('auto'));
        this.lang = 'en-US';
        this.renotify = false;
        this.sticky = false;
        this.noscreen = false;
        this.silent = true;
    }
    return PushNotificationOptions;
}());
export { PushNotificationOptions };
if (false) {
    /** @type {?} */
    PushNotificationOptions.prototype.body;
    /** @type {?} */
    PushNotificationOptions.prototype.icon;
    /** @type {?} */
    PushNotificationOptions.prototype.sound;
    /** @type {?} */
    PushNotificationOptions.prototype.data;
    /** @type {?} */
    PushNotificationOptions.prototype.tag;
    /** @type {?} */
    PushNotificationOptions.prototype.dir;
    /** @type {?} */
    PushNotificationOptions.prototype.lang;
    /** @type {?} */
    PushNotificationOptions.prototype.renotify;
    /** @type {?} */
    PushNotificationOptions.prototype.sticky;
    /** @type {?} */
    PushNotificationOptions.prototype.vibrate;
    /** @type {?} */
    PushNotificationOptions.prototype.noscreen;
    /** @type {?} */
    PushNotificationOptions.prototype.silent;
}
var PushNotificationService = /** @class */ (function () {
    function PushNotificationService() {
    }
    /**
     * @return {?}
     */
    PushNotificationService.prototype.checkCompatibility = /**
     * @return {?}
     */
    function () {
        return !!('Notification' in window);
    };
    /**
     * @return {?}
     */
    PushNotificationService.prototype.requestPermission = /**
     * @return {?}
     */
    function () {
        return (/** @type {?} */ (from(Notification.requestPermission())));
    };
    /**
     * @param {?} permission
     * @return {?}
     */
    PushNotificationService.prototype.isPermissionGranted = /**
     * @param {?} permission
     * @return {?}
     */
    function (permission) {
        return permission === 'granted';
    };
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    PushNotificationService.prototype.create = /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        var _this = this;
        return new Observable((/**
         * @param {?} obs
         * @return {?}
         */
        function (obs) {
            if (!_this.checkCompatibility()) {
                /** @type {?} */
                var err = 'Notifications are not available in this browser.';
                console.error(err);
                obs.error(err);
                obs.complete();
            }
            _this.requestPermission().subscribe((/**
             * @param {?} perm
             * @return {?}
             */
            function (perm) {
                if (!_this.isPermissionGranted(perm)) {
                    /** @type {?} */
                    var err = 'The user hasn\'t granted you permission to send push notifications';
                    console.error(err);
                    obs.error(err);
                    obs.complete();
                }
                else {
                    /** @type {?} */
                    var notif_1 = new Notification(title, options);
                    notif_1.onshow = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        obs.next({ notification: notif_1, event: e });
                    });
                    notif_1.onclick = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        obs.next({ notification: notif_1, event: e });
                    });
                    notif_1.onerror = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        obs.error({ notification: notif_1, event: e });
                    });
                    notif_1.onclose = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        obs.next({ notification: notif_1, event: e });
                    });
                }
            }));
        }));
    };
    PushNotificationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PushNotificationService.ctorParameters = function () { return []; };
    return PushNotificationService;
}());
export { PushNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wdXNoLW5vdGlmaWNhdGlvbnMvIiwic291cmNlcyI6WyJzcmMvYXBwL3NlcnZpY2VzL3B1c2gtbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFeEM7SUFBQTtRQU1TLFFBQUcsR0FBRyxtQkFBQSxNQUFNLEVBQXlCLENBQUM7UUFDdEMsU0FBSSxHQUFHLE9BQU8sQ0FBQztRQUNmLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUVmLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsV0FBTSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBQUQsOEJBQUM7QUFBRCxDQUFDLEFBYkQsSUFhQzs7OztJQVpDLHVDQUFvQjs7SUFDcEIsdUNBQW9COztJQUNwQix3Q0FBcUI7O0lBQ3JCLHVDQUFpQjs7SUFDakIsc0NBQW1COztJQUNuQixzQ0FBNkM7O0lBQzdDLHVDQUFzQjs7SUFDdEIsMkNBQXdCOztJQUN4Qix5Q0FBc0I7O0lBQ3RCLDBDQUE4Qjs7SUFDOUIsMkNBQXdCOztJQUN4Qix5Q0FBcUI7O0FBR3ZCO0lBRUU7SUFDQSxDQUFDOzs7O0lBQ00sb0RBQWtCOzs7SUFBekI7UUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7O0lBQ00sbURBQWlCOzs7SUFBeEI7UUFDRSxPQUFPLG1CQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxFQUFzQyxDQUFDO0lBQ3RGLENBQUM7Ozs7O0lBQ00scURBQW1COzs7O0lBQTFCLFVBQTRCLFVBQVU7UUFDcEMsT0FBTyxVQUFVLEtBQUssU0FBUyxDQUFDO0lBQ2xDLENBQUM7Ozs7OztJQUNNLHdDQUFNOzs7OztJQUFiLFVBQWUsS0FBYSxFQUFFLE9BQWlDO1FBQS9ELGlCQWdDQztRQS9CQyxPQUFPLElBQUksVUFBVTs7OztRQUFDLFVBQUMsR0FBUTtZQUM1QixJQUFJLENBQUMsS0FBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUU7O29CQUN4QixHQUFHLEdBQUcsa0RBQWtEO2dCQUM5RCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNqQjtZQUVELEtBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFDLElBQTRCO2dCQUM5RCxJQUFJLENBQUMsS0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDN0IsR0FBRyxHQUFHLG9FQUFvRTtvQkFDaEYsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDZixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ2hCO3FCQUFNOzt3QkFDQyxPQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztvQkFDOUMsT0FBSyxDQUFDLE1BQU07Ozs7b0JBQUcsVUFBQyxDQUFNO3dCQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLE9BQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUMsQ0FBQyxDQUFBLENBQUM7b0JBQ0YsT0FBSyxDQUFDLE9BQU87Ozs7b0JBQUcsVUFBQyxDQUFNO3dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLE9BQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUMsQ0FBQyxDQUFBLENBQUM7b0JBQ0YsT0FBSyxDQUFDLE9BQU87Ozs7b0JBQUcsVUFBQyxDQUFNO3dCQUNyQixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxFQUFFLE9BQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDL0MsQ0FBQyxDQUFBLENBQUM7b0JBQ0YsT0FBSyxDQUFDLE9BQU87Ozs7b0JBQUcsVUFBQyxDQUFNO3dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLE9BQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUMsQ0FBQyxDQUFBLENBQUM7aUJBQ0g7WUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBN0NGLFVBQVU7Ozs7SUE4Q1gsOEJBQUM7Q0FBQSxBQTlDRCxJQThDQztTQTdDWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQdXNoTm90aWZpY2F0aW9uT3B0aW9ucyB7XHJcbiAgcHVibGljIGJvZHk6IHN0cmluZztcclxuICBwdWJsaWMgaWNvbjogc3RyaW5nO1xyXG4gIHB1YmxpYyBzb3VuZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBkYXRhOiBhbnk7XHJcbiAgcHVibGljIHRhZzogc3RyaW5nO1xyXG4gIHB1YmxpYyBkaXIgPSAnYXV0bycgYXMgTm90aWZpY2F0aW9uRGlyZWN0aW9uO1xyXG4gIHB1YmxpYyBsYW5nID0gJ2VuLVVTJztcclxuICBwdWJsaWMgcmVub3RpZnkgPSBmYWxzZTtcclxuICBwdWJsaWMgc3RpY2t5ID0gZmFsc2U7XHJcbiAgcHVibGljIHZpYnJhdGU6IEFycmF5PG51bWJlcj47XHJcbiAgcHVibGljIG5vc2NyZWVuID0gZmFsc2U7XHJcbiAgcHVibGljIHNpbGVudCA9IHRydWU7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFB1c2hOb3RpZmljYXRpb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcbiAgcHVibGljIGNoZWNrQ29tcGF0aWJpbGl0eSAoKSB7XHJcbiAgICByZXR1cm4gISEoJ05vdGlmaWNhdGlvbicgaW4gd2luZG93KTtcclxuICB9XHJcbiAgcHVibGljIHJlcXVlc3RQZXJtaXNzaW9uKCk6IE9ic2VydmFibGU8Tm90aWZpY2F0aW9uUGVybWlzc2lvbj4ge1xyXG4gICAgcmV0dXJuIGZyb20oTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKCkpIGFzIE9ic2VydmFibGU8Tm90aWZpY2F0aW9uUGVybWlzc2lvbj47XHJcbiAgfVxyXG4gIHB1YmxpYyBpc1Blcm1pc3Npb25HcmFudGVkIChwZXJtaXNzaW9uKSB7XHJcbiAgICByZXR1cm4gcGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnO1xyXG4gIH1cclxuICBwdWJsaWMgY3JlYXRlICh0aXRsZTogc3RyaW5nLCBvcHRpb25zPzogUHVzaE5vdGlmaWNhdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnM6IGFueSkgPT4ge1xyXG4gICAgICAgaWYgKCF0aGlzLmNoZWNrQ29tcGF0aWJpbGl0eSgpKSB7XHJcbiAgICAgICAgIGNvbnN0IGVyciA9ICdOb3RpZmljYXRpb25zIGFyZSBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3Nlci4nO1xyXG4gICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgIG9icy5lcnJvcihlcnIpO1xyXG4gICAgICAgICBvYnMuY29tcGxldGUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yZXF1ZXN0UGVybWlzc2lvbigpLnN1YnNjcmliZSgocGVybTogTm90aWZpY2F0aW9uUGVybWlzc2lvbikgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Blcm1pc3Npb25HcmFudGVkKHBlcm0pKSB7XHJcbiAgICAgICAgICBjb25zdCBlcnIgPSAnVGhlIHVzZXIgaGFzblxcJ3QgZ3JhbnRlZCB5b3UgcGVybWlzc2lvbiB0byBzZW5kIHB1c2ggbm90aWZpY2F0aW9ucyc7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICBvYnMuZXJyb3IoZXJyKTtcclxuICAgICAgICAgIG9icy5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBub3RpZiA9IG5ldyBOb3RpZmljYXRpb24odGl0bGUsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgbm90aWYub25zaG93ID0gKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBvYnMubmV4dCh7IG5vdGlmaWNhdGlvbjogbm90aWYsIGV2ZW50OiBlIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIG5vdGlmLm9uY2xpY2sgPSAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIG9icy5uZXh0KHsgbm90aWZpY2F0aW9uOiBub3RpZiwgZXZlbnQ6IGUgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgbm90aWYub25lcnJvciA9IChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgb2JzLmVycm9yKHsgbm90aWZpY2F0aW9uOiBub3RpZiwgZXZlbnQ6IGUgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgbm90aWYub25jbG9zZSA9IChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgb2JzLm5leHQoeyBub3RpZmljYXRpb246IG5vdGlmLCBldmVudDogZSB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=