/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';
export class PushNotificationOptions {
    constructor() {
        this.dir = (/** @type {?} */ ('auto'));
        this.lang = 'en-US';
        this.renotify = false;
        this.sticky = false;
        this.noscreen = false;
        this.silent = true;
    }
}
if (false) {
    /** @type {?} */
    PushNotificationOptions.prototype.body;
    /** @type {?} */
    PushNotificationOptions.prototype.icon;
    /** @type {?} */
    PushNotificationOptions.prototype.sound;
    /** @type {?} */
    PushNotificationOptions.prototype.data;
    /** @type {?} */
    PushNotificationOptions.prototype.tag;
    /** @type {?} */
    PushNotificationOptions.prototype.dir;
    /** @type {?} */
    PushNotificationOptions.prototype.lang;
    /** @type {?} */
    PushNotificationOptions.prototype.renotify;
    /** @type {?} */
    PushNotificationOptions.prototype.sticky;
    /** @type {?} */
    PushNotificationOptions.prototype.vibrate;
    /** @type {?} */
    PushNotificationOptions.prototype.noscreen;
    /** @type {?} */
    PushNotificationOptions.prototype.silent;
}
export class PushNotificationService {
    constructor() {
    }
    /**
     * @return {?}
     */
    checkCompatibility() {
        return !!('Notification' in window);
    }
    /**
     * @return {?}
     */
    requestPermission() {
        return (/** @type {?} */ (from(Notification.requestPermission())));
    }
    /**
     * @param {?} permission
     * @return {?}
     */
    isPermissionGranted(permission) {
        return permission === 'granted';
    }
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    create(title, options) {
        return new Observable((/**
         * @param {?} obs
         * @return {?}
         */
        (obs) => {
            if (!this.checkCompatibility()) {
                /** @type {?} */
                const err = 'Notifications are not available in this browser.';
                console.error(err);
                obs.error(err);
                obs.complete();
            }
            this.requestPermission().subscribe((/**
             * @param {?} perm
             * @return {?}
             */
            (perm) => {
                if (!this.isPermissionGranted(perm)) {
                    /** @type {?} */
                    const err = 'The user hasn\'t granted you permission to send push notifications';
                    console.error(err);
                    obs.error(err);
                    obs.complete();
                }
                else {
                    /** @type {?} */
                    const notif = new Notification(title, options);
                    notif.onshow = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.next({ notification: notif, event: e });
                    });
                    notif.onclick = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.next({ notification: notif, event: e });
                    });
                    notif.onerror = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.error({ notification: notif, event: e });
                    });
                    notif.onclose = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.next({ notification: notif, event: e });
                    });
                }
            }));
        }));
    }
}
PushNotificationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PushNotificationService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wdXNoLW5vdGlmaWNhdGlvbnMvIiwic291cmNlcyI6WyJzcmMvYXBwL3NlcnZpY2VzL3B1c2gtbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFeEMsTUFBTSxPQUFPLHVCQUF1QjtJQUFwQztRQU1TLFFBQUcsR0FBRyxtQkFBQSxNQUFNLEVBQXlCLENBQUM7UUFDdEMsU0FBSSxHQUFHLE9BQU8sQ0FBQztRQUNmLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUVmLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsV0FBTSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0NBQUE7OztJQVpDLHVDQUFvQjs7SUFDcEIsdUNBQW9COztJQUNwQix3Q0FBcUI7O0lBQ3JCLHVDQUFpQjs7SUFDakIsc0NBQW1COztJQUNuQixzQ0FBNkM7O0lBQzdDLHVDQUFzQjs7SUFDdEIsMkNBQXdCOztJQUN4Qix5Q0FBc0I7O0lBQ3RCLDBDQUE4Qjs7SUFDOUIsMkNBQXdCOztJQUN4Qix5Q0FBcUI7O0FBSXZCLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEM7SUFDQSxDQUFDOzs7O0lBQ00sa0JBQWtCO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxJQUFJLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFDTSxpQkFBaUI7UUFDdEIsT0FBTyxtQkFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsRUFBc0MsQ0FBQztJQUN0RixDQUFDOzs7OztJQUNNLG1CQUFtQixDQUFFLFVBQVU7UUFDcEMsT0FBTyxVQUFVLEtBQUssU0FBUyxDQUFDO0lBQ2xDLENBQUM7Ozs7OztJQUNNLE1BQU0sQ0FBRSxLQUFhLEVBQUUsT0FBaUM7UUFDN0QsT0FBTyxJQUFJLFVBQVU7Ozs7UUFBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsRUFBRTs7c0JBQ3hCLEdBQUcsR0FBRyxrREFBa0Q7Z0JBQzlELE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsU0FBUzs7OztZQUFDLENBQUMsSUFBNEIsRUFBRSxFQUFFO2dCQUNsRSxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFOzswQkFDN0IsR0FBRyxHQUFHLG9FQUFvRTtvQkFDaEYsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDZixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ2hCO3FCQUFNOzswQkFDQyxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztvQkFDOUMsS0FBSyxDQUFDLE1BQU07Ozs7b0JBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRTt3QkFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQzlDLENBQUMsQ0FBQSxDQUFDO29CQUNGLEtBQUssQ0FBQyxPQUFPOzs7O29CQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUU7d0JBQ3pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUM5QyxDQUFDLENBQUEsQ0FBQztvQkFDRixLQUFLLENBQUMsT0FBTzs7OztvQkFBRyxDQUFDLENBQU0sRUFBRSxFQUFFO3dCQUN6QixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDL0MsQ0FBQyxDQUFBLENBQUM7b0JBQ0YsS0FBSyxDQUFDLE9BQU87Ozs7b0JBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRTt3QkFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQzlDLENBQUMsQ0FBQSxDQUFDO2lCQUNIO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQTdDRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHVzaE5vdGlmaWNhdGlvbk9wdGlvbnMge1xyXG4gIHB1YmxpYyBib2R5OiBzdHJpbmc7XHJcbiAgcHVibGljIGljb246IHN0cmluZztcclxuICBwdWJsaWMgc291bmQ6IHN0cmluZztcclxuICBwdWJsaWMgZGF0YTogYW55O1xyXG4gIHB1YmxpYyB0YWc6IHN0cmluZztcclxuICBwdWJsaWMgZGlyID0gJ2F1dG8nIGFzIE5vdGlmaWNhdGlvbkRpcmVjdGlvbjtcclxuICBwdWJsaWMgbGFuZyA9ICdlbi1VUyc7XHJcbiAgcHVibGljIHJlbm90aWZ5ID0gZmFsc2U7XHJcbiAgcHVibGljIHN0aWNreSA9IGZhbHNlO1xyXG4gIHB1YmxpYyB2aWJyYXRlOiBBcnJheTxudW1iZXI+O1xyXG4gIHB1YmxpYyBub3NjcmVlbiA9IGZhbHNlO1xyXG4gIHB1YmxpYyBzaWxlbnQgPSB0cnVlO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQdXNoTm90aWZpY2F0aW9uU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG4gIHB1YmxpYyBjaGVja0NvbXBhdGliaWxpdHkgKCkge1xyXG4gICAgcmV0dXJuICEhKCdOb3RpZmljYXRpb24nIGluIHdpbmRvdyk7XHJcbiAgfVxyXG4gIHB1YmxpYyByZXF1ZXN0UGVybWlzc2lvbigpOiBPYnNlcnZhYmxlPE5vdGlmaWNhdGlvblBlcm1pc3Npb24+IHtcclxuICAgIHJldHVybiBmcm9tKE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpKSBhcyBPYnNlcnZhYmxlPE5vdGlmaWNhdGlvblBlcm1pc3Npb24+O1xyXG4gIH1cclxuICBwdWJsaWMgaXNQZXJtaXNzaW9uR3JhbnRlZCAocGVybWlzc2lvbikge1xyXG4gICAgcmV0dXJuIHBlcm1pc3Npb24gPT09ICdncmFudGVkJztcclxuICB9XHJcbiAgcHVibGljIGNyZWF0ZSAodGl0bGU6IHN0cmluZywgb3B0aW9ucz86IFB1c2hOb3RpZmljYXRpb25PcHRpb25zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzOiBhbnkpID0+IHtcclxuICAgICAgIGlmICghdGhpcy5jaGVja0NvbXBhdGliaWxpdHkoKSkge1xyXG4gICAgICAgICBjb25zdCBlcnIgPSAnTm90aWZpY2F0aW9ucyBhcmUgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGJyb3dzZXIuJztcclxuICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICBvYnMuZXJyb3IoZXJyKTtcclxuICAgICAgICAgb2JzLmNvbXBsZXRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucmVxdWVzdFBlcm1pc3Npb24oKS5zdWJzY3JpYmUoKHBlcm06IE5vdGlmaWNhdGlvblBlcm1pc3Npb24pID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNQZXJtaXNzaW9uR3JhbnRlZChwZXJtKSkge1xyXG4gICAgICAgICAgY29uc3QgZXJyID0gJ1RoZSB1c2VyIGhhc25cXCd0IGdyYW50ZWQgeW91IHBlcm1pc3Npb24gdG8gc2VuZCBwdXNoIG5vdGlmaWNhdGlvbnMnO1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgb2JzLmVycm9yKGVycik7XHJcbiAgICAgICAgICBvYnMuY29tcGxldGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3Qgbm90aWYgPSBuZXcgTm90aWZpY2F0aW9uKHRpdGxlLCBvcHRpb25zKTtcclxuICAgICAgICAgIG5vdGlmLm9uc2hvdyA9IChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgb2JzLm5leHQoeyBub3RpZmljYXRpb246IG5vdGlmLCBldmVudDogZSB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBub3RpZi5vbmNsaWNrID0gKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBvYnMubmV4dCh7IG5vdGlmaWNhdGlvbjogbm90aWYsIGV2ZW50OiBlIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIG5vdGlmLm9uZXJyb3IgPSAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIG9icy5lcnJvcih7IG5vdGlmaWNhdGlvbjogbm90aWYsIGV2ZW50OiBlIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIG5vdGlmLm9uY2xvc2UgPSAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIG9icy5uZXh0KHsgbm90aWZpY2F0aW9uOiBub3RpZiwgZXZlbnQ6IGUgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19