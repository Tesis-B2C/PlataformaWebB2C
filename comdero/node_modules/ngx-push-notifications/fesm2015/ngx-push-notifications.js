import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PushNotificationOptions {
    constructor() {
        this.dir = (/** @type {?} */ ('auto'));
        this.lang = 'en-US';
        this.renotify = false;
        this.sticky = false;
        this.noscreen = false;
        this.silent = true;
    }
}
class PushNotificationService {
    constructor() {
    }
    /**
     * @return {?}
     */
    checkCompatibility() {
        return !!('Notification' in window);
    }
    /**
     * @return {?}
     */
    requestPermission() {
        return (/** @type {?} */ (from(Notification.requestPermission())));
    }
    /**
     * @param {?} permission
     * @return {?}
     */
    isPermissionGranted(permission) {
        return permission === 'granted';
    }
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    create(title, options) {
        return new Observable((/**
         * @param {?} obs
         * @return {?}
         */
        (obs) => {
            if (!this.checkCompatibility()) {
                /** @type {?} */
                const err = 'Notifications are not available in this browser.';
                console.error(err);
                obs.error(err);
                obs.complete();
            }
            this.requestPermission().subscribe((/**
             * @param {?} perm
             * @return {?}
             */
            (perm) => {
                if (!this.isPermissionGranted(perm)) {
                    /** @type {?} */
                    const err = 'The user hasn\'t granted you permission to send push notifications';
                    console.error(err);
                    obs.error(err);
                    obs.complete();
                }
                else {
                    /** @type {?} */
                    const notif = new Notification(title, options);
                    notif.onshow = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.next({ notification: notif, event: e });
                    });
                    notif.onclick = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.next({ notification: notif, event: e });
                    });
                    notif.onerror = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.error({ notification: notif, event: e });
                    });
                    notif.onclose = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        obs.next({ notification: notif, event: e });
                    });
                }
            }));
        }));
    }
}
PushNotificationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PushNotificationService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PushNotificationOptions, PushNotificationService };

//# sourceMappingURL=ngx-push-notifications.js.map