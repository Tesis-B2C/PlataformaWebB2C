{"version":3,"sources":["ng://ngx-push-notifications/src/app/services/push-notification.service.ts"],"names":["PushNotificationOptions","this","dir","lang","renotify","sticky","noscreen","silent","PushNotificationService","prototype","checkCompatibility","window","requestPermission","from","Notification","isPermissionGranted","permission","create","title","options","_this","Observable","obs","err","console","error","complete","subscribe","perm","notif_1","onshow","e","next","notification","event","onclick","onerror","onclose","Injectable"],"mappings":"0TAAA,IAAAA,EAGA,SAAAA,IAMSC,KAAAC,IAAG,OACHD,KAAAE,KAAO,QACPF,KAAAG,UAAW,EACXH,KAAAI,QAAS,EAETJ,KAAAK,UAAW,EACXL,KAAAM,QAAS,gBAKhB,SAAAC,KA4CF,OA1CSA,EAAAC,UAAAC,mBAAP,WACE,SAAU,iBAAkBC,SAEvBH,EAAAC,UAAAG,kBAAP,WACE,OAAOC,EAAAA,KAAKC,aAAaF,sBAEpBJ,EAAAC,UAAAM,oBAAP,SAA4BC,GAC1B,MAAsB,YAAfA,GAEFR,EAAAC,UAAAQ,OAAP,SAAeC,EAAeC,GAA9B,IAAAC,EAAAnB,KACE,OAAO,IAAIoB,EAAAA,WAAU,SAAEC,GACpB,IAAKF,EAAKV,qBAAsB,KACxBa,EAAM,mDACZC,QAAQC,MAAMF,GACdD,EAAIG,MAAMF,GACVD,EAAII,WAGPN,EAAKR,oBAAoBe,UAAS,SAAEC,GAClC,GAAKR,EAAKL,oBAAoBa,GAKvB,KACCC,EAAQ,IAAIf,aAAaI,EAAOC,GACtCU,EAAMC,OAAM,SAAIC,GACdT,EAAIU,KAAK,CAAEC,aAAcJ,EAAOK,MAAOH,KAEzCF,EAAMM,QAAO,SAAIJ,GACfT,EAAIU,KAAK,CAAEC,aAAcJ,EAAOK,MAAOH,KAEzCF,EAAMO,QAAO,SAAIL,GACfT,EAAIG,MAAM,CAAEQ,aAAcJ,EAAOK,MAAOH,KAE1CF,EAAMQ,QAAO,SAAIN,GACfT,EAAIU,KAAK,CAAEC,aAAcJ,EAAOK,MAAOH,SAjBN,KAC7BR,EAAM,oEACZC,QAAQC,MAAMF,GACdD,EAAIG,MAAMF,GACVD,EAAII,qCA3BbY,EAAAA,mDA8CD9B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, from } from 'rxjs';\r\n\r\nexport class PushNotificationOptions {\r\n  public body: string;\r\n  public icon: string;\r\n  public sound: string;\r\n  public data: any;\r\n  public tag: string;\r\n  public dir = 'auto' as NotificationDirection;\r\n  public lang = 'en-US';\r\n  public renotify = false;\r\n  public sticky = false;\r\n  public vibrate: Array<number>;\r\n  public noscreen = false;\r\n  public silent = true;\r\n}\r\n\r\n@Injectable()\r\nexport class PushNotificationService {\r\n  constructor() {\r\n  }\r\n  public checkCompatibility () {\r\n    return !!('Notification' in window);\r\n  }\r\n  public requestPermission(): Observable<NotificationPermission> {\r\n    return from(Notification.requestPermission()) as Observable<NotificationPermission>;\r\n  }\r\n  public isPermissionGranted (permission) {\r\n    return permission === 'granted';\r\n  }\r\n  public create (title: string, options?: PushNotificationOptions): Observable<any> {\r\n    return new Observable((obs: any) => {\r\n       if (!this.checkCompatibility()) {\r\n         const err = 'Notifications are not available in this browser.';\r\n         console.error(err);\r\n         obs.error(err);\r\n         obs.complete();\r\n      }\r\n\r\n      this.requestPermission().subscribe((perm: NotificationPermission) => {\r\n        if (!this.isPermissionGranted(perm)) {\r\n          const err = 'The user hasn\\'t granted you permission to send push notifications';\r\n          console.error(err);\r\n          obs.error(err);\r\n          obs.complete();\r\n        } else {\r\n          const notif = new Notification(title, options);\r\n          notif.onshow = (e: any) => {\r\n            obs.next({ notification: notif, event: e });\r\n          };\r\n          notif.onclick = (e: any) => {\r\n            obs.next({ notification: notif, event: e });\r\n          };\r\n          notif.onerror = (e: any) => {\r\n            obs.error({ notification: notif, event: e });\r\n          };\r\n          notif.onclose = (e: any) => {\r\n            obs.next({ notification: notif, event: e });\r\n          };\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}