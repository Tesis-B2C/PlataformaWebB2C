(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-push-notifications', ['exports', '@angular/core', 'rxjs'], factory) :
    (factory((global['ngx-push-notifications'] = {}),global.ng.core,global.rxjs));
}(this, (function (exports,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PushNotificationOptions = /** @class */ (function () {
        function PushNotificationOptions() {
            this.dir = ( /** @type {?} */('auto'));
            this.lang = 'en-US';
            this.renotify = false;
            this.sticky = false;
            this.noscreen = false;
            this.silent = true;
        }
        return PushNotificationOptions;
    }());
    var PushNotificationService = /** @class */ (function () {
        function PushNotificationService() {
        }
        /**
         * @return {?}
         */
        PushNotificationService.prototype.checkCompatibility = /**
         * @return {?}
         */
            function () {
                return !!('Notification' in window);
            };
        /**
         * @return {?}
         */
        PushNotificationService.prototype.requestPermission = /**
         * @return {?}
         */
            function () {
                return ( /** @type {?} */(rxjs.from(Notification.requestPermission())));
            };
        /**
         * @param {?} permission
         * @return {?}
         */
        PushNotificationService.prototype.isPermissionGranted = /**
         * @param {?} permission
         * @return {?}
         */
            function (permission) {
                return permission === 'granted';
            };
        /**
         * @param {?} title
         * @param {?=} options
         * @return {?}
         */
        PushNotificationService.prototype.create = /**
         * @param {?} title
         * @param {?=} options
         * @return {?}
         */
            function (title, options) {
                var _this = this;
                return new rxjs.Observable(( /**
                 * @param {?} obs
                 * @return {?}
                 */function (obs) {
                    if (!_this.checkCompatibility()) {
                        /** @type {?} */
                        var err = 'Notifications are not available in this browser.';
                        console.error(err);
                        obs.error(err);
                        obs.complete();
                    }
                    _this.requestPermission().subscribe(( /**
                     * @param {?} perm
                     * @return {?}
                     */function (perm) {
                        if (!_this.isPermissionGranted(perm)) {
                            /** @type {?} */
                            var err = 'The user hasn\'t granted you permission to send push notifications';
                            console.error(err);
                            obs.error(err);
                            obs.complete();
                        }
                        else {
                            /** @type {?} */
                            var notif_1 = new Notification(title, options);
                            notif_1.onshow = ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                obs.next({ notification: notif_1, event: e });
                            });
                            notif_1.onclick = ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                obs.next({ notification: notif_1, event: e });
                            });
                            notif_1.onerror = ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                obs.error({ notification: notif_1, event: e });
                            });
                            notif_1.onclose = ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                obs.next({ notification: notif_1, event: e });
                            });
                        }
                    }));
                }));
            };
        PushNotificationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PushNotificationService.ctorParameters = function () { return []; };
        return PushNotificationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.PushNotificationOptions = PushNotificationOptions;
    exports.PushNotificationService = PushNotificationService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-push-notifications.umd.js.map