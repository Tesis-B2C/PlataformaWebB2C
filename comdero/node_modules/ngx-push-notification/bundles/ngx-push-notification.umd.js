(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('simple-web-notification')) :
    typeof define === 'function' && define.amd ? define('ngx-push-notification', ['exports', '@angular/core', 'rxjs', 'simple-web-notification'], factory) :
    (global = global || self, factory(global['ngx-push-notification'] = {}, global.ng.core, global.rxjs, global.simpleWebNotification));
}(this, (function (exports, core, rxjs, simpleWebNotification) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPushNotificationService = /** @class */ (function () {
        function NgxPushNotificationService() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        NgxPushNotificationService.prototype.showNotification = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            /** @type {?} */
            var observable = new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                simpleWebNotification.showNotification(options.title, {
                    body: options.body,
                    icon: options.icon,
                    onClick: (/**
                     * @return {?}
                     */
                    function onNotificationClicked() {
                        observer.next({
                            type: 'click'
                        });
                    }),
                    autoClose: 4000
                }, (/**
                 * @param {?} error
                 * @param {?} hide
                 * @return {?}
                 */
                function onShow(error, hide) {
                    if (error) {
                        observer.error(error.message);
                    }
                    else {
                        observer.next({
                            type: 'show'
                        });
                        setTimeout((/**
                         * @return {?}
                         */
                        function hideNotification() {
                            observer.next({
                                type: 'close'
                            });
                            hide();
                        }), 4000);
                    }
                }));
            }));
            return observable;
        };
        NgxPushNotificationService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ NgxPushNotificationService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgxPushNotificationService_Factory() { return new NgxPushNotificationService(); }, token: NgxPushNotificationService, providedIn: "root" });
        return NgxPushNotificationService;
    }());

    exports.NgxPushNotificationService = NgxPushNotificationService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-push-notification.umd.js.map
