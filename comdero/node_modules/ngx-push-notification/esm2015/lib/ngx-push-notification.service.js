/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as webNotification from 'simple-web-notification';
import * as i0 from "@angular/core";
export class NgxPushNotificationService {
    /**
     * @param {?} options
     * @return {?}
     */
    showNotification(options) {
        /** @type {?} */
        const observable = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            webNotification.showNotification(options.title, {
                body: options.body,
                icon: options.icon,
                onClick: (/**
                 * @return {?}
                 */
                function onNotificationClicked() {
                    observer.next({
                        type: 'click'
                    });
                }),
                autoClose: 4000
            }, (/**
             * @param {?} error
             * @param {?} hide
             * @return {?}
             */
            function onShow(error, hide) {
                if (error) {
                    observer.error(error.message);
                }
                else {
                    observer.next({
                        type: 'show'
                    });
                    setTimeout((/**
                     * @return {?}
                     */
                    function hideNotification() {
                        observer.next({
                            type: 'close'
                        });
                        hide();
                    }), 4000);
                }
            }));
        }));
        return observable;
    }
}
NgxPushNotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ NgxPushNotificationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxPushNotificationService_Factory() { return new NgxPushNotificationService(); }, token: NgxPushNotificationService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXB1c2gtbm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHVzaC1ub3RpZmljYXRpb24vIiwic291cmNlcyI6WyJsaWIvbmd4LXB1c2gtbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUs1QyxPQUFPLEtBQUssZUFBZSxNQUFNLHlCQUF5QixDQUFDOztBQUszRCxNQUFNLE9BQU8sMEJBQTBCOzs7OztJQUNyQyxnQkFBZ0IsQ0FBQyxPQUFnQjs7Y0FDekIsVUFBVSxHQUFHLElBQUksVUFBVTs7OztRQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFO1lBQzdELGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUM5QyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7Z0JBQ2xCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsT0FBTzs7O2dCQUFFLFNBQVMscUJBQXFCO29CQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDO3dCQUNaLElBQUksRUFBRSxPQUFPO3FCQUNkLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUE7Z0JBQ0QsU0FBUyxFQUFFLElBQUk7YUFDaEI7Ozs7O1lBQUUsU0FBUyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUk7Z0JBQzVCLElBQUksS0FBSyxFQUFFO29CQUNULFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUMvQjtxQkFBTTtvQkFDTCxRQUFRLENBQUMsSUFBSSxDQUFDO3dCQUNaLElBQUksRUFBRSxNQUFNO3FCQUNiLENBQUMsQ0FBQztvQkFFSCxVQUFVOzs7b0JBQUMsU0FBUyxnQkFBZ0I7d0JBQ2xDLFFBQVEsQ0FBQyxJQUFJLENBQUM7NEJBQ1osSUFBSSxFQUFFLE9BQU87eUJBQ2QsQ0FBQyxDQUFDO3dCQUNILElBQUksRUFBRSxDQUFDO29CQUNULENBQUMsR0FBRSxJQUFJLENBQUMsQ0FBQztpQkFDVjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDO1FBRUYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7O1lBbENGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4vdHlwZSc7XG5cbmltcG9ydCAqIGFzIHdlYk5vdGlmaWNhdGlvbiBmcm9tICdzaW1wbGUtd2ViLW5vdGlmaWNhdGlvbic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neFB1c2hOb3RpZmljYXRpb25TZXJ2aWNlIHtcbiAgc2hvd05vdGlmaWNhdGlvbihvcHRpb25zOiBPcHRpb25zKTogT2JzZXJ2YWJsZTxUeXBlPiB7XG4gICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8VHlwZT4pID0+IHtcbiAgICAgIHdlYk5vdGlmaWNhdGlvbi5zaG93Tm90aWZpY2F0aW9uKG9wdGlvbnMudGl0bGUsIHtcbiAgICAgICAgYm9keTogb3B0aW9ucy5ib2R5LFxuICAgICAgICBpY29uOiBvcHRpb25zLmljb24sXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uTm90aWZpY2F0aW9uQ2xpY2tlZCgpIHtcbiAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgIHR5cGU6ICdjbGljaydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXV0b0Nsb3NlOiA0MDAwXG4gICAgICB9LCBmdW5jdGlvbiBvblNob3coZXJyb3IsIGhpZGUpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICB0eXBlOiAnc2hvdydcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gaGlkZU5vdGlmaWNhdGlvbigpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICB0eXBlOiAnY2xvc2UnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICB9LCA0MDAwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgfVxufVxuIl19